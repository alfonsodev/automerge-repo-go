use crate::repo::{CollectionId, DocumentId, NetworkEvent};
use crossbeam_channel::{Receiver, Sender};

/// A sink for events generated by the network adapter.
pub struct RepoNetworkSink {
    collection_id: CollectionId,
    network_sender: Sender<(CollectionId, NetworkEvent)>,
}

impl RepoNetworkSink {
    pub(crate) fn new(
        network_sender: Sender<(CollectionId, NetworkEvent)>,
        collection_id: CollectionId,
    ) -> Self {
        RepoNetworkSink {
            network_sender,
            collection_id,
        }
    }
    pub fn new_message(&self, message: Vec<u8>) {
        let event = NetworkEvent::NewMessage(message);
        self.network_sender
            .send((self.collection_id.clone(), event))
            .expect("Failed to send network event.");
    }
}

pub trait NetworkAdapter: Send {
    fn send_message(&self);

    fn plug_into_sink(&self, sink: RepoNetworkSink);
}

pub trait StorageAdapter: Send {
    fn save_document(&self, document: ());
}
